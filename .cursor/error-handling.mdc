---
description: Error handling guidelines for the Waritally project
globs: 
alwaysApply: false
---

## Rule 1: Use Sentinel Errors for Error Types
Description: Define base error types using sentinel errors for each distinct error case. This allows for error type checking across error wrapping chains using `errors.Is`.

### Good Example:
```go
package domain

import "errors"

var (
	ErrCountryNotFound = errors.New("country not found")
	ErrInvalidCountry  = errors.New("invalid country data")
)

func IsCountryNotFoundError(err error) bool {
	return errors.Is(err, ErrCountryNotFound)
}
```

### Bad Example:
```go
package domain

// Bad: Using string constants or direct error creation
const ErrCountryNotFound = "country not found"

func IsCountryNotFound(err error) bool {
	return err.Error() == ErrCountryNotFound // Don't compare error strings
}
```

## Rule 2: Wrap Errors with Context
Description: When domain context is needed, wrap base errors using a custom error type that implements both `Error()` and `Unwrap()`. This maintains the error chain while adding structured context.

### Good Example:
```go
package domain

type CountryError struct {
	Err         error
	CountryCode string
}

func (e *CountryError) Error() string {
	return fmt.Sprintf("%v: %s", e.Err, e.CountryCode)
}

func (e *CountryError) Unwrap() error {
	return e.Err
}

func NewCountryNotFoundError(code string) error {
	return &CountryError{
		Err:         ErrCountryNotFound,
		CountryCode: code,
	}
}

// Helper to safely extract context
func GetCountryCode(err error) (string, bool) {
	var countryErr *CountryError
	if errors.As(err, &countryErr) {
		return countryErr.CountryCode, true
	}
	return "", false
}
```

### Bad Example:
```go
package domain

// Bad: Just formatting error message without proper wrapping
func NewCountryNotFoundError(code string) error {
	return fmt.Errorf("country not found: %s", code)
}
```

## Rule 3: Place Domain Errors in Domain Package
Description: Keep business-related errors in the domain package. Infrastructure or implementation-specific errors should be wrapped with domain errors if they need to cross the boundary.

### Good Example:
```go
// domain/errors.go
package domain

var (
	ErrCountryNotFound = errors.New("country not found")
)

// infrastructure/repository.go
package infrastructure

func (r *Repository) GetCountry(code string) (*Country, error) {
	data, err := r.db.Query(...)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, domain.NewCountryNotFoundError(code)
		}
		return nil, fmt.Errorf("failed to query country: %w", err)
	}
	return data, nil
}
```

### Bad Example:
```go
// Bad: Domain errors defined in infrastructure
package infrastructure

var ErrCountryNotFound = errors.New("country not found")

func (r *Repository) GetCountry(code string) (*Country, error) {
	return nil, ErrCountryNotFound
}
```

## Rule 4: Handle Errors Appropriately in HTTP Handlers
Description: HTTP handlers should map domain errors to appropriate HTTP responses while maintaining detailed logging. Use structured logging with error context.

### Good Example:
```go
func HandleGetCountry(countryRepo domain.CountryRepository, log logger.Logger) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		country, err := countryRepo.GetCountry(r.Context(), "US")
		if err != nil {
			if domain.IsCountryNotFoundError(err) {
				if code, ok := domain.GetCountryCode(err); ok {
					log.Error("country", err, "country not found", 
						"country_code", code)
				}
				renderErrorPage(w, r, http.StatusNotFound, 
					"Country not found")
				return
			}
			log.Error("country", err, "failed to get country")
			renderErrorPage(w, r, http.StatusInternalServerError, 
				"Internal server error")
			return
		}
		renderCountry(w, r, country)
	}
}
```

### Bad Example:
```go
func HandleGetCountry(repo domain.CountryRepository) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		country, err := repo.GetCountry(r.Context(), "US")
		if err != nil {
			// Bad: Direct error exposure and no logging
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		renderCountry(w, r, country)
	}
}
```

## Rule 5: Handle Page Rendering Errors Gracefully
Description: When rendering pages (as opposed to API endpoints), errors should result in rendering error pages rather than returning HTTP error responses. This provides a better user experience in web applications.

### Good Example:
```go
func displayUserProfile(w http.ResponseWriter, r *http.Request, logger Logger) {
	userID := chi.URLParam(r, "id")
	user, err := userRepo.GetUser(r.Context(), userID)
	if err != nil {
		logger.Error("user_profile", err, "failed to fetch user profile", 
			"user_id", userID)
		renderErrorPage(w, r, http.StatusInternalServerError, 
			"We're sorry, but we couldn't load this profile right now")
		return
	}
	
	templ.Handler(views.UserProfile(user)).ServeHTTP(w, r)
}
```

### Bad Example:
```go
func displayUserProfile(w http.ResponseWriter, r *http.Request) {
	userID := chi.URLParam(r, "id")
	user, err := userRepo.GetUser(r.Context(), userID)
	if err != nil {
		// Bad: Returns raw HTTP error for page view
		http.Error(w, "Failed to load user", http.StatusInternalServerError)
		return
	}
	
	templ.Handler(views.UserProfile(user)).ServeHTTP(w, r)
}
```